/* eslint-disable no-useless-escape */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// base on https://github.com/DTStack/monaco-sql-languages/blob/main/src/sparksql/sparksql.ts
import { languages } from 'monaco-editor';

export const SparkLanguageConfig: languages.LanguageConfiguration = {
  comments: {
    lineComment: '--',
    blockComment: ['/*', '*/']
  },
  wordPattern: /(-?\d*\.\d\w*)|([^`~!#%^&*()\-=+\[{\]}\\|;:'",.<>\/?\s]+)/g,

  brackets: [
    ['{', '}'],
    ['[', ']'],
    ['(', ')']
  ],
  autoClosingPairs: [
    { open: '{', close: '}' },
    { open: '[', close: ']' },
    { open: '(', close: ')' },
    { open: '"', close: '"' },
    { open: "'", close: "'" }
  ],
  surroundingPairs: [
    { open: '{', close: '}' },
    { open: '[', close: ']' },
    { open: '(', close: ')' },
    { open: '"', close: '"' },
    { open: "'", close: "'" }
  ]
};

export const SparkKeywords = [
  'add',
  'after',
  'all',
  'alter',
  'analyze',
  'and',
  'anti',
  'any',
  'archive',
  'array',
  'as',
  'asc',
  'at',
  'authorization',
  'between',
  'both',
  'bucket',
  'buckets',
  'by',
  'cache',
  'cascade',
  'case',
  'cast',
  'change',
  'check',
  'clear',
  'cluster',
  'clustered',
  'codegen',
  'collate',
  'collection',
  'column',
  'columns',
  'comment',
  'commit',
  'compact',
  'compactions',
  'compute',
  'concatenate',
  'constraint',
  'cost',
  'create',
  'cross',
  'cube',
  'current',
  'current_date',
  'current_time',
  'current_timestamp',
  'current_user',
  'data',
  'database',
  'databases',
  'day',
  'dbproperties',
  'defined',
  'delete',
  'delimited',
  'desc',
  'describe',
  'dfs',
  'directories',
  'directory',
  'distinct',
  'distribute',
  'div',
  'drop',
  'else',
  'end',
  'escape',
  'escaped',
  'except',
  'exchange',
  'exists',
  'explain',
  'export',
  'extended',
  'external',
  'extract',
  'false',
  'fetch',
  'fields',
  'filter',
  'fileformat',
  'first',
  'following',
  'for',
  'foreign',
  'format',
  'formatted',
  'from',
  'full',
  'function',
  'functions',
  'global',
  'grant',
  'group',
  'grouping',
  'having',
  'hour',
  'if',
  'ignore',
  'import',
  'in',
  'index',
  'indexes',
  'inner',
  'inpath',
  'inputformat',
  'insert',
  'intersect',
  'interval',
  'into',
  'is',
  'items',
  'join',
  'keys',
  'last',
  'lateral',
  'lazy',
  'leading',
  'left',
  'like',
  'limit',
  'lines',
  'list',
  'load',
  'local',
  'location',
  'lock',
  'locks',
  'logical',
  'macro',
  'map',
  'matched',
  'merge',
  'minute',
  'minus',
  'month',
  'msck',
  'namespace',
  'namespaces',
  'natural',
  'no',
  'not',
  'null',
  'nulls',
  'of',
  'on',
  'only',
  'option',
  'options',
  'or',
  'order',
  'out',
  'outer',
  'outputformat',
  'over',
  'overlaps',
  'overlay',
  'overwrite',
  'partition',
  'partitioned',
  'partitions',
  'percent',
  'pivot',
  'placing',
  'position',
  'preceding',
  'primary',
  'principals',
  'properties',
  'purge',
  'query',
  'range',
  'recordreader',
  'recordwriter',
  'recover',
  'reduce',
  'references',
  'refresh',
  'regexp',
  'rename',
  'repair',
  'replace',
  'reset',
  'respect',
  'restrict',
  'revoke',
  'right',
  'rlike',
  'role',
  'roles',
  'rollback',
  'rollup',
  'row',
  'rows',
  'schema',
  'schemas',
  'second',
  'select',
  'semi',
  'separated',
  'serde',
  'serdeproperties',
  'session_user',
  'set',
  'sets',
  'show',
  'skewed',
  'some',
  'sort',
  'sorted',
  'start',
  'statistics',
  'stored',
  'stratify',
  'struct',
  'substr',
  'substring',
  'sync',
  'table',
  'tables',
  'tablesample',
  'tblproperties',
  'temp',
  'temporary',
  'terminated',
  'then',
  'time',
  'to',
  'touch',
  'trailing',
  'transaction',
  'transactions',
  'transform',
  'trim',
  'true',
  'truncate',
  'try_cast',
  'type',
  'unarchive',
  'unbounded',
  'uncache',
  'union',
  'unique',
  'unknown',
  'unlock',
  'unset',
  'update',
  'use',
  'user',
  'using',
  'values',
  'view',
  'views',
  'when',
  'where',
  'window',
  'with',
  'year',
  'zone'
];

export const SparkOperators = [
  'except',
  'intersect',
  // join
  'left',
  'outer',
  // predicates
  'contains',
  'freetext',
  // pivoting
  'unpivot'
  // merging
];

export const SparkBuiltinFunctions = [
  'abs',
  'acos',
  'acosh',
  'add_months',
  'aggregate',
  'and',
  'any',
  'approx_count_distinct',
  'approx_percentile',
  'array',
  'array_contains',
  'array_distinct',
  'array_except',
  'array_intersect',
  'array_join',
  'array_max',
  'array_min',
  'array_position',
  'array_remove',
  'array_repeat',
  'array_sort',
  'array_union',
  'arrays_overlap',
  'arrays_zip',
  'ascii',
  'asin',
  'asinh',
  'assert_true',
  'atan',
  'atan2',
  'atanh',
  'avg',
  'base64',
  'bigint',
  'bin',
  'binary',
  'bit_and',
  'bit_count',
  'bit_length',
  'bit_or',
  'bit_xor',
  'bool_and',
  'bool_or',
  'boolean',
  'bround',
  'cardinality',
  'cast',
  'cbrt',
  'ceil',
  'ceiling',
  'char',
  'char_length',
  'character_length',
  'chr',
  'coalesce',
  'collect_list',
  'collect_set',
  'concat',
  'concat_ws',
  'conv',
  'corr',
  'cos',
  'cosh',
  'cot',
  'count',
  'count_if',
  'count_min_sketch',
  'covar_pop',
  'covar_samp',
  'crc32',
  'cube',
  'cume_dist',
  'current_database',
  'current_date',
  'current_timestamp',
  'date',
  'date_add',
  'date_format',
  'date_part',
  'date_sub',
  'date_trunc',
  'datediff',
  'day',
  'dayofmonth',
  'dayofweek',
  'dayofyear',
  'decimal',
  'decode',
  'degrees',
  'dense_rank',
  'div',
  'double',
  'e',
  'element_at',
  'elt',
  'encode',
  'every',
  'exists',
  'exp',
  'explode',
  'explode_outer',
  'expm1',
  'factorial',
  'filter',
  'find_in_set',
  'first',
  'first_value',
  'flatten',
  'float',
  'floor',
  'forall',
  'format_number',
  'format_string',
  'from_csv',
  'from_json',
  'from_unixtime',
  'from_utc_timestamp',
  'get_json_object',
  'greatest',
  'grouping',
  'grouping_id',
  'hash',
  'hex',
  'hour',
  'hypot',
  'if',
  'ifnull',
  'in',
  'initcap',
  'inline',
  'inline_outer',
  'input_file_block_length',
  'input_file_block_start',
  'input_file_name',
  'instr',
  'int',
  'isnan',
  'isnotnull',
  'isnull',
  'java_method',
  'json_tuple',
  'kurtosis',
  'lag',
  'last',
  'last_day',
  'last_value',
  'lcase',
  'lead',
  'least',
  'left',
  'length',
  'levenshtein',
  'like',
  'ln',
  'locate',
  'log',
  'log10',
  'log1p',
  'log2',
  'lower',
  'lpad',
  'ltrim',
  'make_date',
  'make_timestamp',
  'map',
  'map_concat',
  'map_entries',
  'map_filter',
  'map_from_arrays',
  'map_from_entries',
  'map_keys',
  'map_values',
  'map_zip_with',
  'max',
  'max_by',
  'md5',
  'mean',
  'min',
  'min_by',
  'minute',
  'mod',
  'monotonically_increasing_id',
  'month',
  'months_between',
  'named_struct',
  'nanvl',
  'negative',
  'next_day',
  'not',
  'now',
  'ntile',
  'nullif',
  'nvl',
  'nvl2',
  'octet_length',
  'or',
  'overlay',
  'parse_url',
  'percent_rank',
  'percentile',
  'percentile_approx',
  'pi',
  'pmod',
  'posexplode',
  'posexplode_outer',
  'position',
  'positive',
  'pow',
  'power',
  'printf',
  'quarter',
  'radians',
  'rand',
  'randn',
  'random',
  'rank',
  'reflect',
  'regexp_extract',
  'regexp_replace',
  'repeat',
  'replace',
  'reverse',
  'right',
  'rint',
  'rlike',
  'rollup',
  'round',
  'row_number',
  'rpad',
  'rtrim',
  'schema_of_csv',
  'schema_of_json',
  'second',
  'sentences',
  'sequence',
  'sha',
  'sha1',
  'sha2',
  'shiftleft',
  'shiftright',
  'shiftrightunsigned',
  'shuffle',
  'sign',
  'signum',
  'sin',
  'sinh',
  'size',
  'skewness',
  'slice',
  'smallint',
  'some',
  'sort_array',
  'soundex',
  'space',
  'spark_partition_id',
  'split',
  'sqrt',
  'stack',
  'std',
  'stddev',
  'stddev_pop',
  'stddev_samp',
  'str_to_map',
  'string',
  'struct',
  'substr',
  'substring',
  'substring_index',
  'sum',
  'tan',
  'tanh',
  'timestamp',
  'tinyint',
  'to_csv',
  'to_date',
  'to_json',
  'to_timestamp',
  'to_unix_timestamp',
  'to_utc_timestamp',
  'transform',
  'transform_keys',
  'transform_values',
  'translate',
  'trim',
  'trunc',
  'ucase',
  'unbase64',
  'unhex',
  'unix_timestamp',
  'upper',
  'uuid',
  'var_pop',
  'var_samp',
  'variance',
  'version',
  'weekday',
  'weekofyear',
  'when',
  'window',
  'xpath',
  'xpath_boolean',
  'xpath_double',
  'xpath_float',
  'xpath_int',
  'xpath_long',
  'xpath_number',
  'xpath_short',
  'xpath_string',
  'xxhash64',
  'year',
  'zip_with'
];

export const SparkLanguage: languages.IMonarchLanguage = {
  defaultToken: '',
  ignoreCase: true,

  brackets: [
    { open: '[', close: ']', token: 'delimiter.square' },
    { open: '(', close: ')', token: 'delimiter.parenthesis' }
  ],

  keywords: SparkKeywords,
  operators: SparkOperators,
  builtinFunctions: SparkBuiltinFunctions,
  builtinVariables: [
    // Configuration
    '@@DATEFIRST',
    '@@DBTS',
    '@@LANGID',
    '@@LANGUAGE',
    '@@LOCK_TIMEOUT',
    '@@MAX_CONNECTIONS',
    '@@MAX_PRECISION',
    '@@NESTLEVEL',
    '@@OPTIONS',
    '@@REMSERVER',
    '@@SERVERNAME',
    '@@SERVICENAME',
    '@@SPID',
    '@@TEXTSIZE',
    '@@VERSION',
    // Cursor
    '@@CURSOR_ROWS',
    '@@FETCH_STATUS',
    // Datetime
    '@@DATEFIRST',
    // Metadata
    '@@PROCID',
    // System
    '@@ERROR',
    '@@IDENTITY',
    '@@ROWCOUNT',
    '@@TRANCOUNT',
    // Stats
    '@@CONNECTIONS',
    '@@CPU_BUSY',
    '@@IDLE',
    '@@IO_BUSY',
    '@@PACKET_ERRORS',
    '@@PACK_RECEIVED',
    '@@PACK_SENT',
    '@@TIMETICKS',
    '@@TOTAL_ERRORS',
    '@@TOTAL_READ',
    '@@TOTAL_WRITE'
  ],
  tables: [],
  columns: [],
  pseudoColumns: ['$ACTION', '$IDENTITY', '$ROWGUID', '$PARTITION'],
  tokenizer: {
    root: [
      { include: '@comments' },
      { include: '@whitespace' },
      { include: '@pseudoColumns' },
      { include: '@numbers' },
      { include: '@strings' },
      { include: '@complexIdentifiers' },
      { include: '@scopes' },
      [/[;,.]/, 'delimiter'],
      [/[()]/, '@brackets'],
      [
        /[\w@#$]+/,
        {
          cases: {
            '@keywords': 'keyword',
            '@operators': 'operator',
            '@tables': 'tables',
            '@columns': 'columns',
            '@builtinVariables': 'predefined',
            '@builtinFunctions': 'predefined',
            '@default': 'identifier'
          }
        }
      ],
      [/[<>=!%&+\-*/|~^]/, 'operator']
    ],
    whitespace: [[/\s+/, 'white']],
    comments: [
      [/--+.*/, 'comment'],
      [/\/\*/, { token: 'comment.quote', next: '@comment' }]
    ],
    comment: [
      [/[^*/]+/, 'comment'],
      // Not supporting nested comments, as nested comments seem to not be standard?
      // i.e. http://stackoverflow.com/questions/728172/are-there-multiline-comment-delimiters-in-sql-that-are-vendor-agnostic
      // [/\/\*/, { token: 'comment.quote', next: '@push' }],    // nested comment not allowed :-(
      [/\*\//, { token: 'comment.quote', next: '@pop' }],
      [/./, 'comment']
    ],
    pseudoColumns: [
      [
        /[$][A-Za-z_][\w@#$]*/,
        {
          cases: {
            '@pseudoColumns': 'predefined',
            '@default': 'identifier'
          }
        }
      ]
    ],
    numbers: [
      [/0[xX][0-9a-fA-F]*/, 'number'],
      [/[$][+-]*\d*(\.\d*)?/, 'number'],
      [/((\d+(\.\d*)?)|(\.\d+))([eE][-+]?\d+)?/, 'number']
    ],
    strings: [
      [/N'/, { token: 'string', next: '@string' }],
      [/'/, { token: 'string', next: '@string' }]
    ],
    string: [
      [/[^']+/, 'string'],
      [/''/, 'string'],
      [/'/, { token: 'string', next: '@pop' }]
    ],
    complexIdentifiers: [
      [/\[/, { token: 'identifier.quote', next: '@bracketedIdentifier' }],
      [/"/, { token: 'identifier.quote', next: '@quotedIdentifier' }],
      [/`/, { token: 'identifier.quote', next: '@primedIdentifier' }]
    ],
    bracketedIdentifier: [
      [/[^\]]+/, 'identifier'],
      [/]]/, 'identifier'],
      [/]/, { token: 'identifier.quote', next: '@pop' }]
    ],
    quotedIdentifier: [
      [/[^"]+/, 'identifier'],
      [/""/, 'identifier'],
      [/"/, { token: 'identifier.quote', next: '@pop' }]
    ],
    primedIdentifier: [
      [
        /[^`]+/,
        {
          cases: {
            '@tables': 'tables',
            '@columns': 'columns',
            '@default': 'identifier'
          }
        }
      ],
      [/``/, 'identifier'],
      [/`/, { token: 'identifier', next: '@pop' }]
    ],
    scopes: [
      [/BEGIN\s+(DISTRIBUTED\s+)?TRAN(SACTION)?\b/i, 'keyword'],
      [/BEGIN\s+TRY\b/i, { token: 'keyword.try' }],
      [/END\s+TRY\b/i, { token: 'keyword.try' }],
      [/BEGIN\s+CATCH\b/i, { token: 'keyword.catch' }],
      [/END\s+CATCH\b/i, { token: 'keyword.catch' }],
      [/(BEGIN|CASE)\b/i, { token: 'keyword.block' }],
      [/END\b/i, { token: 'keyword.block' }],
      [/WHEN\b/i, { token: 'keyword.choice' }],
      [/THEN\b/i, { token: 'keyword.choice' }]
    ]
  }
} as languages.IMonarchLanguage;
